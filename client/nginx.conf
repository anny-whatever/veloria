server {
    listen 80;
    server_name veloria.in www.veloria.in;

    # Proxy all requests to the Node.js SSR server
    location / {
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        
        # Allow back/forward cache to work properly by not using no-store
        add_header Cache-Control "no-cache, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }

    # Serve built assets directly (most important)
    location ^~ /assets/ {
        alias /var/www/veloria/client/dist/client/assets/;
        expires 30d;
        add_header Cache-Control "public, max-age=2592000, immutable";
        add_header Access-Control-Allow-Origin "*";
        add_header Vary Accept-Encoding;
        try_files $uri =404;

        # Unset any potential no-store headers that could prevent bfcache
        proxy_hide_header Cache-Control;
        proxy_hide_header Pragma;
    }

    # Handle node_modules and source paths (for development-like URLs that might be generated)
    location ~* ^/(node_modules|src)/ {
        # Redirect to the SSR server which will handle these requests
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    # Cache other static files
    location ~* \.(css|js|jpg|jpeg|png|gif|ico|svg|woff|woff2|ttf|eot)$ {
        root /var/www/veloria/client/dist/client;
        expires 15d;
        add_header Cache-Control "public, max-age=1296000, immutable";
        add_header Access-Control-Allow-Origin "*";
        add_header Vary Accept-Encoding;
        try_files $uri =404;
        
        # Unset any potential no-store headers that could prevent bfcache
        proxy_hide_header Cache-Control;
        proxy_hide_header Pragma;
    }

    # Enable brotli if available
    brotli on;
    brotli_comp_level 6;
    brotli_types 
        application/javascript 
        application/json 
        application/x-javascript 
        application/xml 
        application/xml+rss 
        text/css 
        text/javascript 
        text/plain 
        text/xml;

    # Enable gzip compression
    gzip on;
    gzip_comp_level 6;
    gzip_min_length 256;
    gzip_proxied any;
    gzip_vary on;
    gzip_types
        application/javascript
        application/json
        application/x-javascript
        application/xml
        application/xml+rss
        text/css
        text/javascript
        text/plain
        text/xml;

    # Security headers
    add_header X-Content-Type-Options "nosniff";
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy "strict-origin-when-cross-origin";
    
    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
} 